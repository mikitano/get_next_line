# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    gnl comentado.txt                                  :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: mkitano <mkitano@student.42sp.org.br>      +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2025/08/16 14:43:47 by mkitano           #+#    #+#              #
#    Updated: 2025/08/30 13:34:16 by mkitano          ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

#include "get_next_line.h"

char	*read_line(int fd, char *buffer, char *remaining);
char	*divide_line_and_save_rest(char *line);

char	*get_next_line(int fd)
{
	static char	*remaining;
	char		*line;
	char		*buffer;

	buffer = malloc((BUFFER_SIZE + 1) * sizeof(char));
	if (!buffer)
		return (NULL);
	if ((fd < 0) || (BUFFER_SIZE <= 0))
	{
		free(buffer);
		remaining = NULL;
		return (NULL);
	}
	line = read_line(fd, buffer, remaining);
	//printf("o que le: %s\n", line);

	if (!line)
	{
		free(buffer);
		free(remaining);
		return (NULL);
	}
	remaining = divide_line_and_save_rest(line);
	free(buffer);
	return (line);
}

char	*read_line(int fd, char *buffer, char *remaining)
{
	int		bytes_read;
	char	*temp;

	bytes_read = 1;
	while (bytes_read > 0)
	/*esse é o remaining antigo, então ele só vai verificar se 
	tem o '\n' depois que ele já tiver dado o join pra remaining.*/
	{
		bytes_read = read(fd, buffer, BUFFER_SIZE);
		if (bytes_read < 0)
			return (NULL);
		else if (bytes_read == 0)
			return (remaining);
		buffer[bytes_read] = '\0';
		/*\0 transforma com que o que foi lido em string pra
		que possamos usar o strjoin!*/
		temp = remaining;
		remaining = ft_strjoin(temp, buffer);
		free(temp);
		temp = NULL;
		if (ft_strchr(remaining, '\n'))
			return (remaining);
	}
	return (remaining);
}

char	*divide_line_and_save_rest(char *line)
{
	int		i;
	char	*save_rest;

	i = 0;
	if (line[i] == '\0')
		return (NULL);
	while (line[i] && line[i] != '\n')
		i++;
	if (!line[i])
	{
		return (NULL);
	}
	i++;
	save_rest = ft_substr(line, i, (ft_strlen(line) - i));
	if (!save_rest)
		return (NULL);
	//printf("o que salva: %s\n", save_rest);
	line[i] = '\0';
	return (save_rest);
}

// //fução para dar free?
// char	*ft_free (char *s1, char *s2)
// {
// 	free(s1);
// 	free(s2);
// 	return (NULL)
// }
